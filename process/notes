------------------------------------------------基本概念----------------------------------------------------

进程：进程是一种概念，当一个应用程序启动时，系统会创建一个进程，并且分配内存和创建一个线程，
这个线程主要来完成进程的任务，因此这个进程被称为主线程

多进程（一个主进程，多个子进程）
    每个进程都有它自己的内存和它的主线程，进程间不会相互影响，如A的进程出现了异常，只会停止它自己，
    不会影响其他的进程

    Manager方式
    m = Manager()  # 创建管理对象
    score = m.Value('f', 1.0)
    names = m.Array('c', range(20))
    让子进程修改的对象通过args方式传入到任务函数中

    注意： 为了防止多进程之间修改同个共享变量（导致数据不一致），可以通过Manager.Lock()锁对象进行加锁操作

    在修改共享变量的区域：
    with lock:  # 由主进程创建并传入任务函数中
        score.value += 100
        print(score.value)


    在主进程中创建Lock对象：
    lock = m.Lock()

进程间通信（IPC）

    pip管道
        a.双向管道（任意一端的conn都可以进行发送和接收消息）
        b.单向管道（第一个conn只能接收消息，第二个conn只能发送消息）

    from multiprocessing import Pipe
    pipe = Pipe(duplex=True)
    # 返回pipe为Tuple（conn1, conn2)

    常用方法：
        conn.send('发送的消息')
        msg = conn.recv()  # 接收消息

    Queue 队列方式
    from multiprocessing import Queue
    创建Queue：
        q = Queue(maxsize=5)  # 设置消息量的最大值

        同manager用法，将queue传入到任务函数中

        常用方法：
            q.put(消息， timeout=5)  # 超时时间一过，直接抛出异常，程序中断
            msg = q.get() 获取消息，在规定时间内没有获取到消息，则会抛出异常

多线程
1) 在一个进程中可以创建多个子线程
所有的线程共享进程的内存，所以当一个子线程发生异常的时候，会导致整个进程异常
因此，在子线程中，要处理可能存在的异常：
    try:
        xxx
    except:
        pass
    finally:
        xxx    # 较多使用try except语句进行异常处理

2)生产者消费者模式
    1 生产线程
        仓库是否满仓，如果没有满，继续生产，反之等待仓库不满的消息
        当可以生产时，生产之后 --> 通知 notify() 通知消费线程可以消费
    2 消费线程
        仓库是否为空，如果为空时，等待仓库不为空消息
        仓库中不为空，则直接消费 --> 通知生产线程可以再生产

    3 仓库对象

    4 同步条件对象 Condition
        加锁：acquire()
        解锁：release()
        等待：wait()
        唤醒：notify()/notify_all()/notifyALL()  # 两个notify--all没有区别
        获取线程id: threading.current_thread()

    5 线程之间的通信队列
        a，线程之间的通信队列Queue
            from queue import Queue
        b，进程之间的通信队列Queue
            from multiprocessing import Queue

    6 协程
        为了完成一个任务，分化成两个小任务，两个小任务之间相互交换数据，直到完成任务为止，
        这个过程被称作携程
        import time
        def produce():
            i = 0
            while True:
                i = i + 1
                print('已生产: {}，等待消费'.format(i))
                yield i
                time.sleep(3)
        def consumer(p):
            while True:
                msg = next(p)
                print('消费了', msg)  # 获取生产信息
        if __name__ == '__main__':
            p = produce()
            consumer(p)
            print('--over--')
        简单的携程信息，


-----------------------------------------------操作实现----------------------------------------------------
1.通过os模块获取进程名
os.getpid() 获取当前进程名
os.getppid() 获取父进程名

2.进程池
pool = Pool(processes=5)  # 创建5个子进程，反正一共是五个子进程，无论怎么干掉，都会自动创建至五个子进程
cs = ['python' + str(i) for i in range(1, 11)]
    for i in range(10):
        pool.apply_async(study, args=(cs[i],))  # args传值，传递cs第[i]个参数
创建进程池，然后分配进程池
进程结束之后，关闭进程池：pool.close(); pool.join(): 此命令是等待所有子进程结束，然后在关闭主进程

3.进程池中一个进程处理结束，则会发出空闲通知，其他等待任务会进行争抢资源，让子进程完成任务
  如果，因为系统原因，进程池中的进程被kill，当前子进程会从pool去掉，然后poll会重新建立一个新的子进程进程运行剩余的任务

4.apply同步模式，同步的话就是一个一个进，一个一个出，进程池就没有用了，进程池必须是异步

5.python不同进程之间共享变量必须通过c语言的共享变量方式进行
  money = Value('f', 100)
  p = Process(target=modify_money, args=(money,))

  names = Array('c', range(20))  # range(20) 只是指定一个字符数组的长度大小

6.进程间通信，实现两个进程的通信，可以使用管道(pipe)和队列实现
    1,管道：
        pipe = Pipe()  # 返回一个元组(conn1, conn2)
        p1 = Process(name='发送者', target=sender, args=(pipe[0],))
        p2 = Process(name='接收者', target=receiver, args=(pipe[1],))

        def sender(conn):
        msg = '您好，我是Disen'
        conn.send(msg)

        def receiver(conn):
        msg = '已收到'
        conn.recv()
        两个进程之间通过pipe的send和pipe的recv进行接收发送消息，
        只能两个进程间进行数据传输，不能多个进程间通信。
    2,队列：
        q = Queue(maxsize=2)  # 最大消息数量

        def boss(q):  # 老板一次最多放2个任务
            q.put(msg)  # 如果msg数量没有到达 maxsize=2，直接存入，到达maxsize=2，一直等待空闲，
                          亦可以设置超时时间，超时抛出异常，程序终止

        def worker(q):
            q.get()  # 员工一次最多处理2个任务

         向队列存入对象。block为True，timeout为None，且队列中的量已最大时，将会阻塞到slot可用为至，
         如果设置了timeout超时时长，则到过超时时间后，则会抛出异常。
         如果block为False，如果队列够用时，直接存入，否则直接抛出异常。


